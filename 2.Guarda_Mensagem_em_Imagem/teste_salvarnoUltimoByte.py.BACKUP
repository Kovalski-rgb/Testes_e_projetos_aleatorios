#whenether we want it or not we stepped into a war with the cabbal

array_bytes = []
decimais = [
    13,
    14,
    30,
    13,
    14,
    30,
    13,
    14,
    14,
    14,
    30,
    13,
    14,
    30,
    13,
    14,
    14,
    14,
    30,
    13,
    14,
    30,
    13,
    14,
    14
]

mensagem = 23015234
mensagemSTR = [] #STRING DE CADA NUMERO DA MENSAGEM

def guardar(mensagem):
    for i in str(mensagem):
        mensagemSTR.append("{0:04b}".format(int(i)))
        
    print(mensagemSTR)
    mensagem = "{0:08b}".format(mensagem)
    for i in range(len(decimais)):
        #transforma o numero atual (que vai receber a mensagem) em uma string byte
        array_bytes.append("{0:08b}".format(decimais[i]))   #https://www.kite.com/python/answers/how-to-convert-a-string-to-binary-in-python
        
        print('decimal:',decimais[i])
        print('byteOri:',array_bytes[i])

        try:
            array_bytes[i] = (array_bytes[i])[:-1] + mensagem[i]  #https://stackoverflow.com/questions/6167238/what-does-mean | https://stackoverflow.com/questions/15535205/what-does-1-mean-do-in-python
        except IndexError:
            array_bytes[i] = (array_bytes[i])[:-1] + '0'
                #byteMSG = byteMSG[:-1] + "1"           #pelo que eu compreendi, ele pega a lista inteira com o :, menos 1 posição (que no caso é a ultima) usando p -1
        print('byteMsl:',(array_bytes[i])[-1:])          #https://stackoverflow.com/questions/509211/understanding-slice-notation
        print('byteMOD:',array_bytes[i])
        print()
    print('mensagem:',mensagem)

def ler(array_bytes):
    print('recuperd: ', end='')
    oito = 0
    cod = ''
    for i in range(len(array_bytes)):
        if(oito==8):
            #print(cod)
            print(int(cod, 2), end = ' ')
            cod = ''
            oito = 0
        #print(array_bytes[i][-1:], end = '') #printa o valor binario
        cod += array_bytes[i][-1:]
        oito += 1

guardar(mensagem)
ler(array_bytes)

